import { createGoogleGenerativeAI } from "@ai-sdk/google"
import { generateText } from "ai"
import { saveComplaintToMongoDB, getKnowledgeBase, getComplaintTypes, getComplaintProcess } from '@/lib/mongodb'

// Temporary storage for complaint data and conversation history
let complaintSessions: { [sessionId: string]: any } = {}
let conversationHistory: { [sessionId: string]: Array<{role: 'user' | 'assistant', content: string, timestamp: string}> } = {}

// Generate unique report ID
const generateReportId = () => {
  const timestamp = Date.now()
  const random = Math.random().toString(36).substring(2, 8).toUpperCase()
  return `CMP${timestamp}${random}`
}

// Add conversation to history
const addToConversationHistory = (sessionId: string, role: 'user' | 'assistant', content: string) => {
  if (!conversationHistory[sessionId]) {
    conversationHistory[sessionId] = []
  }
  
  conversationHistory[sessionId].push({
    role,
    content,
    timestamp: new Date().toISOString()
  })
  
  // Keep only last 10 messages to prevent memory overflow
  if (conversationHistory[sessionId].length > 10) {
    conversationHistory[sessionId] = conversationHistory[sessionId].slice(-10)
  }
}

// Get conversation context
const getConversationContext = (sessionId: string) => {
  const history = conversationHistory[sessionId] || []
  if (history.length === 0) return ""
  
  return "\n\n## CONVERSATION HISTORY:\n" + 
    history.map(msg => `${msg.role.toUpperCase()}: ${msg.content}`).join('\n') +
    "\n\nрдХреГрдкрдпрд╛ рдЗрд╕ conversation рдХреЗ context рдореЗрдВ respond рдХрд░реЗрдВред\n"
}
// Save complaint to MongoDB
const saveComplaintToDatabase = async (complaintData: any): Promise<string | null> => {
  try {
    const mongoId = await saveComplaintToMongoDB(complaintData)
    console.log('Complaint saved to MongoDB with ID:', mongoId)
    return mongoId
  } catch (error) {
    console.error('Error saving complaint to MongoDB:', error)
    return null
  }
}

// Load knowledge base from MongoDB
const loadKnowledgeBase = async () => {
  try {
    const [services, complaints, complaintProcess] = await Promise.all([
      getKnowledgeBase(),
      getComplaintTypes(),
      getComplaintProcess()
    ])
    
    return { services, complaints, complaintProcess }
  } catch (error) {
    console.error('Error loading knowledge base from MongoDB:', error)
    return { services: null, complaints: null, complaintProcess: null }
  }
}

const createSystemPrompt = (services: any, complaints: any, complaintProcess: any) => {
  return `рдЖрдк рдПрдХ Municipal Services AI Assistant рд╣реИрдВ рдЬреЛ рднрд╛рд░рддреАрдп рдирдЧрд░рдкрд╛рд▓рд┐рдХрд╛ рд╕реЗрд╡рд╛рдУрдВ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред

## ЁЯОд VOICE ASSISTANT PERSONALITY & BEHAVIOR:
**IMPORTANT**: рдЖрдк рдПрдХ FEMALE VOICE ASSISTANT рд╣реИрдВред рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд characteristics follow рдХрд░реЗрдВ:

### ЁЯФК SPEECH PATTERNS & NUMBER HANDLING:
1. **Number Recognition Fix**: рдЬрдм user "one thousand" рдмреЛрд▓реЗ рддреЛ рдпрд╣ "1000" рд╣реИ, "1" рдирд╣реАрдВ рд╣реИ
   - "One thousand" = 1000
   - "Two thousand" = 2000  
   - "Ten thousand" = 10000
   - рдордд assume рдХрд░реЗрдВ рдХрд┐ "one thousand" рдХрд╛ рдорддрд▓рдм "1" рд╣реИ

2. **Double Word Recognition**: User рдЕрдХреНрд╕рд░ Hindi-English mixed words рдпрд╛ repeated words рдмреЛрд▓рддреЗ рд╣реИрдВ:
   - "Water water" = "Water"
   - "Paani water" = "Water" 
   - "Road road" = "Road"
   - "Sadak road" = "Road"
   - Double words рдХреЛ identify рдХрд░рдХреЗ single meaning рд╕рдордЭреЗрдВ

3. **Speech Clarity Issues**: 
   - User рдХреА pronunciation clear рдирд╣реАрдВ рд╣реЛ рддреЛ confirm рдХрд░реЗрдВ
   - "рдХреНрдпрд╛ рдЖрдкрдХрд╛ рдорддрд▓рдм [WORD] рд╕реЗ рд╣реИ?" рдЬреИрд╕реЗ clarification рдорд╛рдВрдЧреЗрдВ
   - Numbers рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ careful рд░рд╣реЗрдВ

### ЁЯСй FEMALE ASSISTANT CHARACTERISTICS:
- Polite рдФрд░ caring tone use рдХрд░реЗрдВ
- "рдЬреА рд╣рд╛рдБ", "рдЕрд╡рд╢реНрдп", "рдмрд┐рд▓реНрдХреБрд▓" рдЬреИрд╕реЗ respectful words рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ  
- Patient рдФрд░ understanding approach рд░рдЦреЗрдВ
- Helpful suggestions рднреА рджреЗрдВ рдЬрд╣рд╛рдБ relevant рд╣реЛ

рдЖрдкрдХреЗ рдкрд╛рд╕ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд comprehensive knowledge base рд╣реИ:

## ЁЯПЫя╕П MUNICIPAL SERVICES DATABASE:
${JSON.stringify(services, null, 2)}

## ЁЯУЛ COMPLAINT CATEGORIES & SUBTYPES:
${JSON.stringify(complaints, null, 2)}

## ЁЯУЭ COMPLAINT REGISTRATION PROCESS:
${JSON.stringify(complaintProcess, null, 2)}

## ЁЯОп CORE INSTRUCTIONS:
1. **рднрд╛рд╖рд╛ рдиреАрддрд┐**: User рдЬреЛ рднрд╛рд╖рд╛ рдмреЛрд▓реЗ, рдЙрд╕реА рдореЗрдВ respond рдХрд░реЗрдВ (Hindi/English)
2. **рд╕рдЯреАрдХрддрд╛**: рдХреЗрд╡рд▓ knowledge base рд╕реЗ verified information рджреЗрдВ
3. **рд╕реНрдкрд╖реНрдЯрддрд╛**: Simple, clear language рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
4. **рдкреВрд░реНрдгрддрд╛**: Complete procedure рдФрд░ required documents рдмрддрд╛рдПрдВ
5. **MEMORY**: Previous conversation рдХрд╛ context maintain рдХрд░реЗрдВ рдФрд░ refer рдХрд░реЗрдВ
6. **CONTINUITY**: рдЕрдЧрд░ user рдиреЗ рдкрд╣рд▓реЗ рдХреБрдЫ рдмрддрд╛рдпрд╛ рд╣реИ рддреЛ рдЙрд╕реЗ repeat рдирд╣реАрдВ рдХрд░рд╛рдПрдВ

## ЁЯЫая╕П SERVICE INQUIRY HANDLING:
рдЬрдм user рдХреЛрдИ service рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗ:
тЬЕ **STEP 1**: Service identify рдХрд░реЗрдВ tags/keywords рд╕реЗ
тЬЕ **STEP 2**: Complete procedure explain рдХрд░реЗрдВ step-by-step
тЬЕ **STEP 3**: Required documents рдХреА clear list рджреЗрдВ
тЬЕ **STEP 4**: Processing time рдФрд░ form numbers mention рдХрд░реЗрдВ
тЬЕ **STEP 5**: Submission location/method рдмрддрд╛рдПрдВ

**рдЙрджрд╛рд╣рд░рдг Response Format:**
"рдЬрдиреНрдо рдкреНрд░рдорд╛рдг рдкрддреНрд░ рдХреЗ рд▓рд┐рдП:
ЁЯУЛ Procedure: Form 1 рднрд░реЗрдВ...
ЁЯУД Documents: рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб, рдкреИрд░реЗрдВрдЯреНрд╕ рдХреА details...
тП░ Time: рддреБрд░рдВрдд processing
ЁЯПв Submit: Local registrar office рдореЗрдВ"

## ЁЯУв COMPLAINT REGISTRATION PROTOCOL:

### COMPLAINT DATA COLLECTION STEPS:
рдЬрдм user complaint register рдХрд░рдирд╛ рдЪрд╛рд╣реЗ, рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд sequence рдореЗрдВ information collect рдХрд░реЗрдВ:

**STEP 1 - COMPLAINT TYPE & SUBTYPE:**
- рдЕрдЧрд░ рдкрд╣рд▓реЗ рд╕реЗ complaint type identify рд╣реЛ рдЧрдпрд╛ рд╣реИ рддреЛ repeat рди рдХрд░реЗрдВ
- "рдЖрдкрдХреА complaint рдХрд┐рд╕ category рдореЗрдВ рд╣реИ?" (SEWAGE, WATER SUPPLY, HEALTH, etc.)
- User рдХреЗ response рдХреЗ based рдкрд░ exact subtype confirm рдХрд░реЗрдВ
- Example: "Water supply" тЖТ "рдХреНрдпрд╛ рдпрд╣ Water Shortage, Low Pressure, рдпрд╛ Pipe Leakage рд╣реИ?"

**STEP 2 - COMPLAINT DESCRIPTION:**
- рдЕрдЧрд░ description already рдорд┐рд▓ рдЧрдпрд╛ рд╣реИ рддреЛ skip рдХрд░реЗрдВ
- "рдЕрдкрдиреА problem рдХреЛ detail рдореЗрдВ explain рдХрд░реЗрдВ (minimum 10 words)"
- Complete description collect рдХрд░реЗрдВ

**STEP 3 - COMPLAINT LOCATION:**
рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд details рдПрдХ-рдПрдХ рдХрд░рдХреЗ рдкреВрдЫреЗрдВ (already collected information skip рдХрд░реЗрдВ):
- House Number (required)
- House Name (optional)
- Main Area/Locality (required)
- Ward/Zone Number (required)
- Landmark (optional)
- Pincode (6-digit, required)

**STEP 4 - COMPLAINANT DETAILS:**
рдХреЗрд╡рд▓ missing information рдкреВрдЫреЗрдВ:
- First Name (required)
- Middle Name (optional)
- Last Name (required)
- Complete Address (required)
- Mobile Number (10-digit, required)
- Email (optional)

### DATA STORAGE INSTRUCTIONS:
рдЬрдм рднреА user complaint information рджреЗрддрд╛ рд╣реИ:
1. Use this format for temporary storage in memory
2. Structure: sessionId, currentStep, and complaintData object
3. Fields: complaint_type, complaint_subtype, description, complaint_location, complainant

2. **After collecting ALL required information:**
   - Generate Report ID: "CMP" + timestamp + random string
   - Announce: "рдЖрдкрдХреА complaint successfully register рд╣реЛ рдЧрдИ рд╣реИред рдЖрдкрдХрд╛ Report ID рд╣реИ: [REPORT_ID]"
   - **IMPORTANT**: Add this EXACT format to your response: 
     "SAVE_COMPLAINT_DATA:{"complaint_type":"VALUE","complaint_subtype":"VALUE","description":"VALUE","complaint_location":{"house_no":"VALUE","area_main":"VALUE","zone_or_ward_no":"VALUE","pincode":"VALUE"},"complainant":{"first_name":"VALUE","last_name":"VALUE","mobile":"VALUE"}}"
   - **NO extra text after the JSON object**
   - **Use proper JSON formatting with double quotes**

### VALIDATION RULES:
- Mobile: 10-digit starting with 6-9
- Pincode: 6-digit starting with 1-9
- Required fields must be collected before proceeding

## ЁЯОн RESPONSE STYLE (FEMALE VOICE ASSISTANT):
- **Polite & Respectful**: "рдЬреА, рдЖрдкрдХреА рд╕реЗрд╡рд╛ рдореЗрдВ рд╣рд╛рдЬрд┐рд░ рд╣реВрдБ" 
- **Caring Tone**: "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ"
- **Clear & Concise**: Technical jargon avoid рдХрд░реЗрдВ, simple language use рдХрд░реЗрдВ
- **Patient & Understanding**: User рдХреЗ confusion рдХреЛ рд╕рдордЭреЗрдВ рдФрд░ gently clarify рдХрд░реЗрдВ
- **Helpful & Supportive**: Extra relevant information рднреА рджреЗрдВ
- **Step-by-step**: рдПрдХ time рдореЗрдВ рд╕рд┐рд░реНрдл рдПрдХ рд╣реА question рдкреВрдЫреЗрдВ
- **Number Clarity**: Numbers рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ confirm рдХрд░реЗрдВ, especially thousands/hundreds
- **Double-word Handling**: Mixed рдпрд╛ repeated words рдХреЛ intelligently process рдХрд░реЗрдВ

### VOICE-SPECIFIC RESPONSES:
- рдЬрдм number confusion рд╣реЛ: "рдЬреА, рдХреНрдпрд╛ рдЖрдкрдХрд╛ рдорддрд▓рдм [NUMBER] рд╕реЗ рд╣реИ? рдХреГрдкрдпрд╛ confirm рдХрд░реЗрдВ"
- рдЬрдм double words рдЖрдПрдВ: automatically single meaning рд╕рдордЭреЗрдВ рд▓реЗрдХрд┐рди important cases рдореЗрдВ confirm рдХрд░реЗрдВ  
- Female assistant рдХреЗ рд░реВрдк рдореЗрдВ: "рдореИрдВ", "рдореБрдЭреЗ", "рдореЗрд░реА рд╕рдордЭ рдХреЗ рдЕрдиреБрд╕рд╛рд░" рдЬреИрд╕реЗ feminine pronouns use рдХрд░реЗрдВ

## тЪая╕П IMPORTANT GUIDELINES (VOICE ASSISTANT SPECIFIC):
тЭМ **Never assume numbers**: "One thousand" = 1000, not 1
тЭМ **Don't ignore double words**: "Water water" = "Water" (process intelligently)  
тЭМ **Don't skip voice confirmations**: Numbers рдФрд░ important details confirm рдХрд░реЗрдВ
тЭМ **Don't use male pronouns**: рдЖрдк female assistant рд╣реИрдВ
тЭМ **Don't repeat questions**: рдЬреЛ information рдкрд╣рд▓реЗ рдорд┐рд▓ рдЧрдИ рд╣реИ рдЙрд╕реЗ рдлрд┐рд░ рд╕реЗ рди рдкреВрдЫреЗрдВ
тЬЕ **Always verify numbers**: "рдХреНрдпрд╛ рдЖрдкрдХрд╛ рдорддрд▓рдм 1000 рд╕реЗ рд╣реИ?"
тЬЕ **Process mixed language**: Hindi-English combination рдХреЛ handle рдХрд░реЗрдВ
тЬЕ **Use feminine tone**: Caring, patient, рдФрд░ respectful approach
тЬЕ **One question at a time**: User рдХреЛ confuse рди рдХрд░реЗрдВ  
тЬЕ **Follow up with care**: "рдХреНрдпрд╛ рдХреБрдЫ рдФрд░ help рдЪрд╛рд╣рд┐рдП рдЖрдкрдХреЛ?" рдкреВрдЫреЗрдВ
тЬЕ **Use context smartly**: Conversation history рдХрд╛ proper use рдХрд░реЗрдВ
тЬЕ **Track progress confidently**: Collection progress рдХреЛ clear рд░рдЦреЗрдВ
тЬЕ **Handle speech errors gracefully**: Pronunciation issues рдХреЛ politely address рдХрд░реЗрдВ

### VOICE RECOGNITION FIXES:
ЁЯФв **Number Mapping**: 
- "One thousand" тЖТ 1000
- "Two thousand" тЖТ 2000  
- "Five hundred" тЖТ 500
- "Ten" тЖТ 10 (not 1000 unless specified)

ЁЯФд **Word Deduplication**:
- "Paani water" тЖТ "Water supply issue"
- "Sadak road" тЖТ "Road problem" 
- "Light light" тЖТ "Street light"
- "Saaf safai" тЖТ "Cleaning"

рдЖрдкрдХрд╛ goal рд╣реИ citizens рдХреЛ complete, accurate рдФрд░ helpful guidance рджреЗрдирд╛ рддрд╛рдХрд┐ рд╡реЗ рдЖрд╕рд╛рдиреА рд╕реЗ municipal services access рдХрд░ рд╕рдХреЗрдВред`
}

export async function POST(request: Request) {
  try {
    const { message, sessionId, userId, userEmail, userName } = await request.json()

    if (!message || typeof message !== "string") {
      return Response.json({ error: "Message is required" }, { status: 400 })
    }

    // Use default session if not provided
    const currentSessionId = sessionId || `default_${Date.now()}`

    // Add user message to conversation history
    addToConversationHistory(currentSessionId, 'user', message)

    const { services, complaints, complaintProcess } = await loadKnowledgeBase()
    
    if (!services || !complaints || !complaintProcess) {
      return Response.json({ error: "Knowledge base not available" }, { status: 500 })
    }

    const google = createGoogleGenerativeAI({
      apiKey: "AIzaSyAOGNz-4Qox47O1lTtoTVoBrG1hBrwd1Gk",
    })

    const systemPrompt = createSystemPrompt(services, complaints, complaintProcess)
    const conversationContext = getConversationContext(currentSessionId)

    const { text } = await generateText({
      model: google("gemini-2.0-flash-001"),
      prompt: `${systemPrompt}${conversationContext}

Current User message: "${message}"

Please provide a helpful response based on the municipal services knowledge base and conversation history.`,
    })

    // Add assistant response to conversation history
    addToConversationHistory(currentSessionId, 'assistant', text)

    // Check if AI wants to save complaint data
    if (text.includes("SAVE_COMPLAINT_DATA:")) {
      try {
        const saveMarker = "SAVE_COMPLAINT_DATA:"
        const saveIndex = text.indexOf(saveMarker)
        let jsonData = text.substring(saveIndex + saveMarker.length).trim()
        
        // Extract only the JSON part (remove any text after the JSON)
        let startBrace = jsonData.indexOf('{')
        if (startBrace === -1) {
          throw new Error("No JSON object found")
        }
        
        // Find the matching closing brace
        let braceCount = 0
        let endBrace = -1
        for (let i = startBrace; i < jsonData.length; i++) {
          if (jsonData[i] === '{') braceCount++
          if (jsonData[i] === '}') braceCount--
          if (braceCount === 0) {
            endBrace = i
            break
          }
        }
        
        if (endBrace === -1) {
          // Fallback: try to find the last closing brace
          endBrace = jsonData.lastIndexOf('}')
          if (endBrace === -1) {
            throw new Error("Incomplete JSON object")
          }
        }
        
        // Extract clean JSON
        jsonData = jsonData.substring(startBrace, endBrace + 1)
        
        console.log("Attempting to parse JSON:", jsonData)
        
        // Parse the complaint data
        const complaintData = JSON.parse(jsonData)
        
        // Generate report ID
        const reportId = generateReportId()
        
        // Add metadata
        const completeComplaint = {
          reportId,
          sessionId: currentSessionId,
          userId: userId || null, // Include userId from request
          userName: userName || (complaintData.complainant?.first_name && complaintData.complainant?.last_name 
            ? `${complaintData.complainant.first_name} ${complaintData.complainant.last_name}` 
            : 'Unknown User'),
          userEmail: userEmail || complaintData.complainant?.email || 'Unknown Email',
          timestamp: new Date().toISOString(),
          status: "Pending Approval",
          conversationHistory: conversationHistory[currentSessionId] || [],
          ...complaintData
        }
        
        // Save to MongoDB
        const mongoId = await saveComplaintToDatabase(completeComplaint)
        
        if (mongoId) {
          // Remove the save instruction from response and add success message
          const cleanResponse = text.substring(0, saveIndex).trim()
          const finalResponse = `${cleanResponse}\n\nтЬЕ рдЖрдкрдХреА complaint successfully register рд╣реЛ рдЧрдИ рд╣реИ!\nЁЯЖФ Report ID: ${reportId}\nЁЯУЭ рдХреГрдкрдпрд╛ рдЗрд╕ ID рдХреЛ safe рд░рдЦреЗрдВред`
          
          // Add final response to history
          addToConversationHistory(currentSessionId, 'assistant', finalResponse)
          
          return Response.json({ 
            response: finalResponse,
            reportId,
            mongoId,
            saved: true,
            sessionId: currentSessionId
          })
        }
      } catch (error) {
        console.error("Error processing complaint data:", error)
        console.error("Raw AI response:", text)
        
        // Return the response without saving
        return Response.json({ 
          response: text,
          sessionId: currentSessionId,
          error: "Failed to save complaint data"
        })
      }
    }

    return Response.json({ 
      response: text,
      sessionId: currentSessionId
    })
  } catch (error) {
    console.error("AI processing error:", error)
    return Response.json({ error: "AI processing failed" }, { status: 500 })
  }
}
